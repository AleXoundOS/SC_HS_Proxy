{-# LINE 1 "MapExtractor.hs" #-}
module Proxy.Server.MapExtractor where
import Proxy.Types.Game
import Proxy.Server.Messages
import System.Directory

extractMapTo :: FilePath -> GameInfo -> IO ()
extractMapTo fp gI = do
  createDirectoryIfMissing True fp
  let fp' = fp ++ "Map-" ++ mapN gI
  existAlready <- doesFileExist fp'
  if existAlready 
    then return ()
    else writeFile fp' (show mapD)
  where mapN = mapName . gameMap
        mapD = tiles . gameMap

isMapData :: FilePath -> Bool
isMapData fp = take 4 fp == "Map-"
        
allGrids :: FilePath -> IO [[[a]]]
allGrids fp = do
  ls <- getDirectoryContents fp 
  let mapDataFiles = filter isMapData ls
  mapM readFile mapDataFiles >>= return . map (read :: String -> [[a]])
 